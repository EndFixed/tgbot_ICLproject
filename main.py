import logging
import jsonGet
import jsonGet2
import jsonGet3

from aiogram import types, Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from pyowm import OWM
from pyowm.utils.config import get_default_config
from yaml import safe_load

from config import api_key_weather, bot_token

bot = Bot(bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands="start")
async def cmdStart(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü–æ–≥–æ–¥–∞ üå•", "–ü–æ–ª–æ–º–∫–∏ ‚ö†", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üì†", "–ò–Ω—Ñ–æ ‚Ñπ"]
    keyboard.add(*buttons)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=keyboard)


@dp.message_handler(text_contains="–ò–Ω—Ñ–æ ‚Ñπ")
async def help(message: types.Message):
    with open('intro.png', 'rb') as png:
        await message.answer_photo(png)
    await message.answer("""
    –ü—Ä–∏–≤–µ—Ç, –Ω–æ–≤—ã–π —é–∑–µ—Ä! üëã
    –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –±–æ—Ç—É.
    –ù–∞—à –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –æ—Ä–æ—à–∞—é—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.
     
    –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.
     
    –ù–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ, —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—Å—è.
    –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è: @endfixed
    """)


class CityChoose(StatesGroup):
    writeCity = State()


@dp.message_handler(text_contains="–ü–æ–≥–æ–¥–∞ üå•")
async def user_cityChoose(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞(—Å–µ–ª–∞):")
    await CityChoose.writeCity.set()


@dp.message_handler(state=CityChoose.writeCity)
async def checkWeather(message: types.Message, state: FSMContext):
    await state.update_data(chosenCity=message.text)
    city = await state.get_data()

    config_dict = get_default_config()
    config_dict['language'] = 'ru'
    config_dict['connection']['use_ssl'] = False
    config_dict['connection']["verify_ssl_certs"] = False
    owm = OWM(api_key_weather, config_dict)
    language = 'ru'
    mgr = owm.weather_manager()
    try:
        observation = mgr.weather_at_place(str(city['chosenCity']))
    except Exception as err:
        print(err)
        await state.finish()
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥(—Å–µ–ª–æ).\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–≥–æ–¥–∞ üå•'")
        return

    w = observation.weather
    temperature = w.temperature('celsius')['temp']
    status = w.detailed_status
    wind = w.wind()

    def WhatIsWind():
        if 0 <= w.wind()['deg'] < 45:
            return '–°–µ–≤–µ—Ä–Ω—ã–π'

        if 45 <= w.wind()['deg'] < 90:
            return '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π'

        if 90 <= w.wind()['deg'] < 135:
            return '–í–æ—Å—Ç–æ—á–Ω—ã–π'

        if 135 <= w.wind()['deg'] < 180:
            return '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π'

        if 180 <= w.wind()['deg'] < 225:
            return '–Æ–∂–Ω—ã–π'

        if 225 <= w.wind()['deg'] < 270:
            return '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π'

        if 270 <= w.wind()['deg'] < 325:
            return '–ó–∞–ø–∞–¥–Ω—ã–π'

        if 325 <= w.wind()['deg'] <= 360:
            return '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π'

    await message.answer(f"""–ì–æ—Ä–æ–¥: {city['chosenCity']}. \n
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞–°.
‚õÖ –ü–æ–≥–æ–¥–∞: {status}.
‚Äçüí® –í–µ—Ç–µ—Ä: """ + WhatIsWind() + f""" {wind['speed']}–º/—Å \
""")

    await state.finish()


@dp.message_handler(text_contains="–ü–æ–ª–æ–º–∫–∏ ‚ö†")
async def notification(message: types.Message):
    with open("var.txt") as file:
        listvar = safe_load(file)

    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ1")
    if listvar['isWatering'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –ü–æ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif listvar['isWorking'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –û—Ä–æ—à–∞—é—à–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        await message.answer("–í—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    with open("var2.txt") as file:
        listvar = safe_load(file)

    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ2")
    if listvar['isWatering'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –ü–æ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif listvar['isWorking'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –û—Ä–æ—à–∞—é—à–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        await message.answer("–í—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    with open("var3.txt") as file:
        listvar = safe_load(file)

    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ3")
    if listvar['isWatering'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –ü–æ–ª–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif listvar['isWorking'] == False:
        await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! \n –û—Ä–æ—à–∞—é—à–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        await message.answer("–í—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# ----------------------------------------------------

@dp.message_handler(text_contains="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üì†")
async def serviceChoose(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["‚Ññ1", "‚Ññ2", "‚Ññ3", "–ù–∞–∑–∞–¥ ‚¨Ö"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–æ—à–∞—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É:", reply_markup=keyboard)


@dp.message_handler(text_contains="‚Ññ1")
async def serviceGet1(message: types.Message):

    with open("var.txt") as file:
        listvar = safe_load(file)

    if listvar['thingId'] == 'device1':
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ1")
        await message.answer(f"""
                –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
            –ü–æ–ª–∏–≤–∞–µ—Ç : {listvar['isWatering']}
            –†–∞–±–æ—Ç–∞–µ—Ç : {listvar['isWorking']}""")
        await message.answer(f"""
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar['current']['geo0']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar['current']['geo0']['lat']}

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–∞–ª—å–Ω–µ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar['current']['geo1']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar['current']['geo1']['lat']}
            """)

        url = f"https://2gis.ru/geo/70030076118166550/{listvar['current']['geo0']['lon']}%2C{listvar['current']['geo0']['lat']}?m=56.424083%2C54.694473%2F5.99"
        await message.answer(f"""–ì–¥–µ —Å–µ–π—á–∞—Å? \n {url}""")
    else:
        file.readline()
        return


@dp.message_handler(text_contains="‚Ññ2")
async def serviceGet2(message: types.Message):

    with open("var2.txt") as file:
        listvar2 = safe_load(file)

        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ2")
        await message.answer(f"""
                –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
            –ü–æ–ª–∏–≤–∞–µ—Ç : {listvar2['isWatering']}
            –†–∞–±–æ—Ç–∞–µ—Ç : {listvar2['isWorking']}""")
        await message.answer(f"""
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar2['current']['geo0']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar2['current']['geo0']['lat']}
 
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–∞–ª—å–Ω–µ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar2['current']['geo1']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar2['current']['geo1']['lat']}
            """)

        url = f"https://2gis.ru/geo/70030076118166550/{listvar2['current']['geo0']['lon']}%2C{listvar2['current']['geo0']['lat']}?m=56.424083%2C54.694473%2F5.99"
        await message.answer(f"""–ì–¥–µ —Å–µ–π—á–∞—Å? \n {url}""")


@dp.message_handler(text_contains="‚Ññ3")
async def serviceGet3(message: types.Message):

    with open("var3.txt") as file:
        listvar3 = safe_load(file)

        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Ññ3")
        await message.answer(f"""
                –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
            –ü–æ–ª–∏–≤–∞–µ—Ç : {listvar3['isWatering']}
            –†–∞–±–æ—Ç–∞–µ—Ç : {listvar3['isWorking']}""")
        await message.answer(f"""
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar3['current']['geo0']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar3['current']['geo0']['lat']}

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–∞–ª—å–Ω–µ–π —Ç–æ—á–∫–∏:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞) : {listvar3['current']['geo1']['lon']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞) : {listvar3['current']['geo1']['lat']}
            """)

        url = f"https://2gis.ru/geo/70030076118166550/{listvar3['current']['geo0']['lon']}%2C{listvar3['current']['geo0']['lat']}?m=56.424083%2C54.694473%2F5.99"
        await message.answer(f"""–ì–¥–µ —Å–µ–π—á–∞—Å? \n {url}""")


@dp.message_handler(text_contains="–ù–∞–∑–∞–¥ ‚¨Ö")
async def btns2(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü–æ–≥–æ–¥–∞ üå•", "–ü–æ–ª–æ–º–∫–∏ ‚ö†", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üì†", "–ò–Ω—Ñ–æ ‚Ñπ"]
    keyboard.add(*buttons)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
